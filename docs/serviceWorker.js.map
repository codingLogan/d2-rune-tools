{"mappings":"ACAA,MAAM,EAAsB,MAAO,IAC/B,IAAM,EAAQ,MAAM,OAAO,IAAI,CAAC,MAChC,GAAI,CACA,MAAM,EAAM,MAAM,CAAC,EACvB,CAAE,MAAO,EAAG,CACR,QAAQ,GAAG,CAAC,eAAgB,CAAC,MAAO,CAAC,GACrC,QAAQ,KAAK,CAAC,yBAClB,CACJ,EAEA,GAAI,CACA,IAAI,EAAQ,CACR,cACA,cACA,uBACH,CAID,EAAQ,EAAM,GAAG,CAAC,AAAA,GAAQ,AAFT,sBAEoB,GAErC,KAAK,gBAAgB,CAAC,UAAW,AAAC,IAC9B,EAAM,SAAS,CACX,EAAoB,GAE5B,GAEA,IAAM,EAAa,MAAO,EAAS,KAC/B,IAAM,EAAQ,MAAM,OAAO,IAAI,CAAC,KAChC,OAAM,EAAM,GAAG,CAAC,EAAS,EAC7B,EAEM,EAAa,MAAO,IACtB,IAAM,EAAoB,MAAM,OAAO,KAAK,CAAC,GAC7C,GAAI,EACF,OAAO,EAET,IAAM,EAAsB,MAAM,MAAM,GAExC,OADA,EAAW,EAAS,EAAoB,KAAK,IACtC,CACX,EAEA,KAAK,gBAAgB,CAAC,QAAS,AAAC,IAC5B,EAAM,WAAW,CAAC,EAAW,EAAM,OAAO,EAC9C,EAEJ,CAAE,MAAM,EAAG,CACP,QAAQ,KAAK,CAAC,QAAS,EAC3B","sources":["<anon>","src/serviceWorker.js"],"sourcesContent":["const addResourcesToCache = async (resources)=>{\n    const cache = await caches.open(\"v1\");\n    try {\n        await cache.addAll(resources);\n    } catch (e) {\n        console.log(\"Cache failed\", {\n            error: e\n        });\n        console.error(\"Failure building cache\");\n    }\n};\ntry {\n    let files = [\n        \"/index.html\",\n        \"/runes.html\",\n        \"/serviceWorkerApp.js\"\n    ];\n    const basePath = \"/diablo-2-runewords\";\n    files = files.map((file)=>basePath + file);\n    self.addEventListener(\"install\", (event)=>{\n        event.waitUntil(addResourcesToCache(files));\n    });\n    const putInCache = async (request, response)=>{\n        const cache = await caches.open(\"v1\");\n        await cache.put(request, response);\n    };\n    const cacheFirst = async (request)=>{\n        const responseFromCache = await caches.match(request);\n        if (responseFromCache) return responseFromCache;\n        const responseFromNetwork = await fetch(request);\n        putInCache(request, responseFromNetwork.clone());\n        return responseFromNetwork;\n    };\n    self.addEventListener(\"fetch\", (event)=>{\n        event.respondWith(cacheFirst(event.request));\n    });\n} catch (e) {\n    console.error(\"Error\", e);\n}\n\n//# sourceMappingURL=serviceWorker.js.map\n","const addResourcesToCache = async (resources) => {\n    const cache = await caches.open(\"v1\");\n    try {\n        await cache.addAll(resources);\n    } catch (e) {\n        console.log(\"Cache failed\", {error: e})\n        console.error(\"Failure building cache\")\n    }\n};\n  \ntry {\n    let files = [\n        \"/index.html\",\n        \"/runes.html\",\n        \"/serviceWorkerApp.js\"\n    ]\n\n    const basePath = '/diablo-2-runewords'\n\n    files = files.map(file => basePath + file)\n\n    self.addEventListener(\"install\", (event) => {\n        event.waitUntil(\n            addResourcesToCache(files),\n        );\n    });\n\n    const putInCache = async (request, response) => {\n        const cache = await caches.open(\"v1\");\n        await cache.put(request, response);\n    };\n      \n    const cacheFirst = async (request) => {\n        const responseFromCache = await caches.match(request);\n        if (responseFromCache) {\n          return responseFromCache;\n        }\n        const responseFromNetwork = await fetch(request);\n        putInCache(request, responseFromNetwork.clone());\n        return responseFromNetwork;\n    };\n      \n    self.addEventListener(\"fetch\", (event) => {\n        event.respondWith(cacheFirst(event.request));\n    });\n      \n} catch(e) {\n    console.error(\"Error\", e)\n}\n  "],"names":["addResourcesToCache","resources","cache","caches","open","addAll","e","console","log","error","files","map","file","basePath","self","addEventListener","event","waitUntil","putInCache","request","response","put","cacheFirst","responseFromCache","match","responseFromNetwork","fetch","clone","respondWith"],"version":3,"file":"serviceWorker.js.map"}